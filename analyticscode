""
15-110 Hw6 - Social Media Analytics Project
Name: Izabella DeReno
AndrewID: iad
"""

import hw6_social_tests as test

project = "Social" # don't edit this

### WEEK 1 ###

import pandas as pd
import nltk
nltk.download('vader_lexicon', quiet=True)
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np
endChars = [ " ", "\n", "#", ".", ",", "?", "!", ":", ";", ")" ]

'''
makeDataFrame(filename)
#3 [Check6-1]
Parameters: str
Returns: dataframe
'''
def makeDataFrame(filename):
    df = pd.read_csv(filename)
    return df

'''
parseName(fromString)
#4 [Check6-1]
Parameters: str
Returns: str
'''
def parseName(fromString):
    name = ""
    y = fromString.split(" ")
    firstName = y[1]
    lastName = y[2]
    name = firstName + " " + lastName
    if lastName[0] == "(":
        name = firstName
    return name


'''
parsePosition(fromString)
#4 [Check6-1]
Parameters: str
Returns: str
'''
def parsePosition(fromString):
    y = fromString.split("(")[1].split(" ")[0]
    return y

'''
parseState(fromString)
#4 [Check6-1]
Parameters: str
Returns: str
'''
def parseState(fromString):
    states = ""
    index = fromString.split(" ")
    indexFrom = 0
    for i in range(len(index)):
        if index[i] == "from":
            states += index[i + 1]
            if i + 2 < len(index):
                states += " " + index[i + 2]
    states = states[:-1]
    return states

'''
findHashtags(message)
#5 [Check6-1]
Parameters: str
Returns: list of strs
'''
def findHashtags(message):
    lst = []
    for i in range(len(message)):
        if message[i]== "#":
            x = i
            for x in range(i+1, len(message)):
                if message[x] in endChars:
                    x -= 1
                    break
            lst.append(message[i:x+1])
    return lst

'''
getRegionFromState(stateDf, state)
#6 [Check6-1]
Parameters: dataframe ; str
Returns: str
'''
def getRegionFromState(stateDf, state):
    i = 0
    for row in stateDf["state"]:
        if row == state:
            return stateDf["region"][i]
        i += 1

'''
addColumns(data, stateDf)
#7 [Check6-1] & #2 [Check6-2]
Parameters: dataframe ; dataframe
Returns: None
'''
def addColumns(data, stateDf):
    names = []
    positions = []
    states = []
    regions = []
    hashtags = []
    sentiment = []
    sI = SentimentIntensityAnalyzer()
    for label in data["label"]:
        names.append(parseName(label))
        positions.append(parsePosition(label))
        states.append(parseState(label))
        regions.append(getRegionFromState(stateDf, parseState(label)))
    for text in data["text"]:
        hashtags.append(findHashtags(text))
        sentiment.append(findSentiment(sI, text))
    data["name"] = names
    data["position"] = positions
    data["state"] = states
    data["region"] = regions
    data["hashtags"] = hashtags
    data["sentiment"] = sentiment
    return

### WEEK 2 ###

'''
findSentiment(classifier, message)
#1 [Check6-2]
Parameters: SentimentIntensityAnalyzer ; str
Returns: str
'''
def findSentiment(classifier, message):
    score = classifier.polarity_scores(message)['compound']
    if score < -0.1:
        return "negative"
    elif score > 0.1:
        return "positive"
    return "neutral"

'''
getDataCountByState(data, colName, dataToCount)
#3 [Check6-2]
Parameters: dataframe ; str ; str
Returns: dict mapping strs to ints
'''
def getDataCountByState(data, colName, dataToCount):
    count = {}
    if colName != "" or dataToCount != "": data = data[data[colName] == dataToCount]
    for i in data["state"]:
        if i not in count:
          count[i] = 0
        count[i] += 1
    return count

'''
getDataForRegion(data, colName)
#4 [Check6-2]
Parameters: dataframe   ; str
Returns: dict mapping strs to (dicts mapping strs to ints)
'''
def getDataForRegion(data, colName):
    d = {}
    for i in range(0, len(data)):
        region = data.iloc[i]["region"]
        colEntry = data.iloc[i][colName]
        if region not in d:
            d[region] = {}
        if colEntry not in d[region]:
            d[region][colEntry] = 0
        d[region][colEntry] += 1

    return d


'''
getHashtagRates(data)
#5 [Check6-2]
Parameters: dataframe
Returns: dict mapping strs to ints
'''
def getHashtagRates(data):
    rates = {}
    for i in range(0, len(data)):
        for i in data.iloc[i]["hashtags"]:
            if i not in rates:
                rates[i] = 0
            rates[i] += 1
    return rates

'''
mostCommonHashtags(hashtags, count)
#6 [Check6-2]
Parameters: dict mapping strs to ints ; int
Returns: dict mapping strs to ints
'''
def mostCommonHashtags(hashtags, count):
    d = {}
    while len(d) < count:
        bestHashtag = ""
        bestCount = 0
        for x in hashtags:
            if hashtags[x] > bestCount:
                if x not in d:
                  bestHashtag = x
                  bestCount = hashtags[x]
        d[bestHashtag] = bestCount
    return d

'''
getHashtagSentiment(data, hashtag)
#7 [Check6-2]
Parameters: dataframe ; str
Returns: float
'''
def getHashtagSentiment(data, hashtag):
    sentiment, num = 0, 0
    for index,row in data.iterrows():
        lst = row["hashtags"]
        if hashtag in lst:
            s = row["sentiment"]
            if s == "positive": sentiment += 1
            elif s == "negative": sentiment -= 1
            num += 1
    if num == 0: return 0
    return sentiment/num


### WEEK 3 ###

'''
graphStateCounts(stateCounts, title)
#2 [Hw6]
Parameters: dict mapping strs to ints ; str
Returns: None
'''
def graphStateCounts(stateCounts, title):
    import matplotlib.pyplot as plt
    x = []
    y = []
    for i in stateCounts:
        x.append(i)
        y.append(stateCounts[i])
    plt.bar(x, y)
    plt.title(title)
    plt.xlabel("States")
    plt.xticks(ticks = list(range(len(x))), labels = x, rotation = "vertical")
    plt.ylabel("Count")
    plt.show()
    return


'''
graphTopNStates(stateCounts, stateFeatureCounts, n, title)
#3 [Hw6]
Parameters: dict mapping strs to ints ; dict mapping strs to ints ; int ; str
Returns: None
'''
def graphTopNStates(stateCounts, stateFeatureCounts, n, title):
    topNStates = {}
    while len(topNStates) < n:
        bestState = ""
        highestRate = 0
        for state in stateCounts:
            if stateCounts[state] != 0 and state in stateFeatureCounts:
                if stateFeatureCounts[state] / stateCounts[state] > highestRate:
                    if state not in topNStates:
                        bestState = state
                        highestRate = stateFeatureCounts[state] / stateCounts[state]
            topNStates[bestState] = highestRate
        graphStateCounts(topNStates, title)
    return


'''
graphRegionComparison(regionDicts, title)
#4 [Hw6]
Parameters: dict mapping strs to (dicts mapping strs to ints) ; str
Returns: None
'''
def graphRegionComparison(regionDicts, title):
    regions = []
    features = []
    rFeat = []
    for dict in regionDicts:
        regions.append(dict)
        fs = regionDicts[dict]
        for f in fs:
            if f not in features:
                features.append(f)

    for dict in regionDicts:
        lst = []
        for feat in features:
            fs = regionDicts[dict]
            if feat in fs:
                f = fs[feat]
            else:
                f = 0
            lst.append(f)
        rFeat.append(lst)
    sideBySideBarPlots(features, regions, rFeat, title)
    return


'''
graphHashtagSentimentByFrequency(data)
#4 [Hw6]
Parameters: dataframe
Returns: None
'''
def graphHashtagSentimentByFrequency(data):
    hashtags = getHashtagRates(data)
    topHashtags = mostCommonHashtags(hashtags, 50)
    lstHashtags = []
    lstFreq = []
    lstSentiment = []
    for hashtag in topHashtags:
        lstHashtags.append(hashtag)
        lstFreq.append(topHashtags[hashtag])
        sentiment = getHashtagSentiment(data, hashtag)
        lstSentiment.append(sentiment)
    scatterPlot(lstFreq, lstSentiment, lstHashtags, "Hashtag Sentiment vs. Frequency" )
    return


#### WEEK 3 PROVIDED CODE ####
"""
Expects 3 lists - one of x labels, one of data labels, and one of data values - and a title.
You can use it to graph any number of datasets side-by-side to compare and contrast.
"""
def sideBySideBarPlots(xLabels, labelList, valueLists, title):
    import matplotlib.pyplot as plt

    w = 0.8 / len(labelList)  # the width of the bars
    xPositions = []
    for dataset in range(len(labelList)):
        xValues = []
        for i in range(len(xLabels)):
            xValues.append(i - 0.4 + w * (dataset + 0.5))
        xPositions.append(xValues)

    for index in range(len(valueLists)):
        plt.bar(xPositions[index], valueLists[index], width=w, label=labelList[index])

    plt.xticks(ticks=list(range(len(xLabels))), labels=xLabels, rotation="vertical")
    plt.legend()
    plt.title(title)

    plt.show()

"""
Expects two lists of probabilities and a list of labels (words) all the same length
and plots the probabilities of x and y, labels each point, and puts a title on top.
Expects that the y axis will be from -1 to 1. If you want a different y axis, change plt.ylim
"""
def scatterPlot(xValues, yValues, labels, title):
    import matplotlib.pyplot as plt
    fig, ax = plt.subplots()

    plt.scatter(xValues, yValues)

    # make labels for the points
    for i in range(len(labels)):
        plt.annotate(labels[i], # this is the text
                    (xValues[i], yValues[i]), # this is the point to label
                    textcoords="offset points", # how to position the text
                    xytext=(0, 10), # distance from text to points (x,y)
                    ha='center') # horizontal alignment can be left, right or center

    plt.title(title)
    plt.ylim(-1, 1)

    # a bit of advanced code to draw a line on y=0
    ax.plot([0, 1], [0.5, 0.5], color='black', transform=ax.transAxes)

    plt.show()


### RUN CODE ###

# This code runs the test cases to check your work
if __name__ == "__main__":
    print("\n" + "#"*15 + " WEEK 1 TESTS " +  "#" * 16 + "\n")
    test.week1Tests()
    print("\n" + "#"*15 + " WEEK 1 OUTPUT " + "#" * 15 + "\n")
    test.runWeek1()

    ## Uncomment these for Week 2 ##
    print("\n" + "#"*15 + " WEEK 2 TESTS " +  "#" * 16 + "\n")
    test.week2Tests()
    print("\n" + "#"*15 + " WEEK 2 OUTPUT " + "#" * 15 + "\n")
    test.runWeek2()

    ## Uncomment these for Week 3 ##
    print("\n" + "#"*15 + " WEEK 3 OUTPUT " + "#" * 15 + "\n")
    test.runWeek3()
